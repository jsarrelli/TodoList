Todolist-Domain {
    akka {
      loglevel = "DEBUG"
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
      log-dead-letters = 0
      log-dead-letters-during-shutdown = off
        actor {
            provider = "cluster"
            warn-about-java-serializer-usage = off
            allow-java-serialization = off
            #Turn on for LoggingReceive
            debug {
                receive = on
                autoreceive = on
                lifecycle = on
                unhandled = on
            }
            serializers {
              kryo = "com.twitter.chill.akka.AkkaSerializer"
            }
            serialization-bindings {
                "java.io.Serializable" = kryo
                "java.lang.Throwable" = kryo
            }
        }

      coordinated-shutdown.exit-jvm = on

      cluster {
        seed-nodes = ["akka://Todolist-Domain@127.0.0.1:25520"]
        seed-nodes = ${?SEED_NODES}
        auto-discovery = off
        shutdown-after-unsuccessful-join-seed-nodes = 30s

        downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
        split-brain-resolver {
          active-strategy = keep-majority
          stable-after = 10s
          down-all-when-unstable = on
        }
        sharding {
            updating-state-timeout = 15 s
            passivate-idle-entity-after = 30 minutes
            least-shard-allocation-strategy {
                rebalance-absolute-limit = 10
                rebalance-relative-limit = 0.5
            }
        }
      }

      persistence {
        max-concurrent-recoveries = 300
        journal-plugin-fallback.recovery-event-timeout = 60s

        journal {
            plugin = "akka-contrib-mongodb-persistence-journal"
            auto-start-journals = ["akka-contrib-mongodb-persistence-journal"]
        }
        snapshot-store{
            plugin = "akka-contrib-mongodb-persistence-snapshot"
            auto-start-snapshot-stores = ["akka-contrib-mongodb-persistence-snapshot"]
            }
          }

         contrib.persistence.mongodb {
            mongo {
                mongouri = "mongodb://localhost:27018/todolist"
                journal-write-concern = "Acknowledged"
                journal-wtimeout = 10s
                journal-fsync = false
                snaps-wtimeout = 10s
                snaps-fsync = false
                suffix-builder.separator = "_"
                suffix-builder.class = "persistence.SuffixCollectionNames"
                journal-collection = "journal"
                snaps-collection = "snapshots"
                realtime-enable-persistence = false
            }
          }
        discovery {
            kubernetes-api {
                pod-label-selector = "app="${?label-app}
                use-raw-ip = false
                pod-namespace = "todolist-app-1"
            }
        }
      management {
        cluster.bootstrap {
            new-cluster-enabled = on
            contact-point-discovery {
                # pick the discovery method you'd like to use:
                discovery-method = kubernetes-api
                pod-label-selector = "app="${?label-app}
                use-raw-ip = false
                required-contact-point-nr = ${REQUIRED_CONTACT_POINT_NR}
            }
        }

        health-checks {
            readiness-checks {
              cluster-membership = "akka.management.cluster.scaladsl.ClusterMembershipCheck"
            }
        }

      }

    }

}


play.modules.enabled+=api.TodoListModule
play.filters.disabled+=play.filters.csrf.CSRFFilter
play.modules.disabled+=play.api.cache.EhCacheModule
play.http.secret.key = "QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241AB`R5W:1uDFN];Ik@n"
